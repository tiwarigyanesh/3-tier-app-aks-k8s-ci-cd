name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=120 ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            if ! command -v screen &> /dev/null; then
              echo "Screen is not installed. Installing screen..."
              sudo apt-get update
              sudo apt-get install -y screen
            fi

            screen -S deploy_session -d -m bash -c '
              set -e

              # Ensure Docker and Docker Compose are installed
              if ! command -v docker &> /dev/null; then
                echo "Docker is not installed. Installing Docker..."
                sudo apt-get update
                sudo apt-get install -y docker.io
              fi

              if ! command -v docker-compose &> /dev/null; then
                echo "Docker Compose is not installed. Installing Docker Compose..."
                sudo curl -L "https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              fi  

              # Create the working directory
              mkdir -p gyanesh
              cd gyanesh

              # Create docker-compose.yml
              cat > docker-compose.yml <<EOL
version: "3.8"
services:
  db:
    image: postgres:latest
    container_name: db_gyanesh
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "admin123"
      POSTGRES_DB: "basic3tier"
    networks:
      - network_gyanesh

  api:
    image: gyaneshtiwari/3-tier-api:latest
    depends_on:
      - db
    environment:
      - ConnectionStrings__Basic3Tier=Host=db;Port=5432;Database=basic3tier;Username=postgres;Password=admin123
    ports:
      - "7007:80"
    networks:
      - network_gyanesh
    container_name: api_gyanesh

  ui:
    image: gyaneshtiwari/3-tier-ui:latest
    depends_on:
      - api
    ports:
      - "5005:80"
    networks:
      - network_gyanesh
    container_name: ui_gyanesh

volumes:
  db-data:

networks:
  network_gyanesh:
EOL

              # Pull the latest images
              echo "Pulling the latest images..."
              docker-compose pull || { echo 'Docker pull failed' ; exit 1; }
              echo "Pull completed."

              # Run Docker Compose
              echo "Stopping existing containers..."
              docker-compose down || { echo 'Docker down failed' ; exit 1; }
              echo "Existing containers stopped."

              echo "Starting new containers..."
              docker-compose up -d || { echo 'Docker up failed' ; exit 1; }
              echo "Containers started."
            '
          EOF