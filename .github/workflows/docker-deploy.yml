name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'

    - name: Build backend
      run: ./gradlew build

    - name: Build frontend
      run: npm install && npm run build --prefix frontend

    - name: Run tests
      run: ./gradlew test

    - name: Scan code with CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: java
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  dockerize:
    needs: build-test-scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker images
      run: |
        docker build -t myusername/myfrontend:latest ./frontend
        docker build -t myusername/mybackend:latest ./backend

    - name: Tag Docker images
      run: |
        IMAGE_TAG=$(date +%Y%m%d%H%M)
        docker tag myusername/myfrontend:latest myusername/myfrontend:$IMAGE_TAG
        docker tag myusername/mybackend:latest myusername/mybackend:$IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Push Docker images
      run: |
        docker push myusername/myfrontend:latest
        docker push myusername/myfrontend:${{ env.IMAGE_TAG }}
        docker push myusername/mybackend:latest
        docker push myusername/mybackend:${{ env.IMAGE_TAG }}

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          IMAGE_TAG=${{ env.IMAGE_TAG }}

          # Pull the latest images
          docker pull myusername/myfrontend:latest
          docker pull myusername/myfrontend:$IMAGE_TAG
          docker pull myusername/mybackend:latest
          docker pull myusername/mybackend:$IMAGE_TAG

          # Run Docker Compose
          cat > docker-compose.yml <<EOL
          version: '3.8'
          services:
            frontend:
              image: myusername/myfrontend:\$IMAGE_TAG
              ports:
                - "80:80"
            backend:
              image: myusername/mybackend:\$IMAGE_TAG
              ports:
                - "8080:8080"
          EOL

          docker-compose down
          docker-compose up -d

          # Verify the deployment
          curl -f http://localhost/ || exit 1
        EOF