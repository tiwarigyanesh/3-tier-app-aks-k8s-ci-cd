name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies for API project
      run: dotnet restore ./api/*

    - name: Restore dependencies for UI project
      run: dotnet restore ./ui/*

    - name: Build API project
      run: dotnet build --configuration Release --no-restore ./api

    - name: Build UI project
      run: dotnet build --configuration Release --no-restore ./ui

    - name: Run tests for API project
      run: dotnet test --no-build --verbosity normal ./api

    - name: Run tests for UI project
      run: dotnet test --no-build --verbosity normal ./ui

    - name: Set up SonarQube scanner
      run: |
        dotnet tool install --global dotnet-sonarscanner
        export PATH="$PATH:/home/runner/.dotnet/tools"

    - name: Run analysis
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      run: |
        dotnet sonarscanner begin /k:"3-tier-ci-cd" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        dotnet build ./api
        dotnet build ./ui
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"  

  dockerize:
    needs: build-test-scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker images
      run: |
        docker build -t gyaneshtiwari/3-tier-ui:latest ./ui
        docker build -t gyaneshtiwari/3-tier-api:latest ./api

    - name: Tag Docker images
      run: |
        docker tag gyaneshtiwari/3-tier-ui:latest gyaneshtiwari/3-tier-ui:latest
        docker tag gyaneshtiwari/3-tier-api:latest gyaneshtiwari/3-tier-api:latest

    - name: Push Docker images
      run: |
        docker push gyaneshtiwari/3-tier-ui:latest
        docker push gyaneshtiwari/3-tier-api:latest

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'

          # Pull the latest images
          docker pull gyaneshtiwari/3-tier-ui:latest
          docker pull gyaneshtiwari/3-tier-api:latest

          # Run Docker Compose
          # Create docker-compose.yml
          cat > docker-compose.yml <<EOL
          version: '3.8'
          services:
            db:
              image: postgres:latest
              container_name: db_gyanesh
              environment:
                POSTGRES_USER: "postgres"
                POSTGRES_PASSWORD: "admin123"
                POSTGRES_DB: "basic3tier"
              networks:
                - network_gyanesh

            api:
              image: gyaneshtiwari/3-tier-api:latest
              depends_on:
                - db
              environment:
                - ConnectionStrings__Basic3Tier=Host=db;Port=5432;Database=basic3tier;Username=postgres;Password=admin123
              ports:
                - "7007:80"
              networks:
                - network_gyanesh
              container_name: api_gyanesh

            ui:
              image: gyaneshtiwari/3-tier-ui:latest
              depends_on:
                - api
              ports:
                - "5005:80"
              networks:
                - network_gyanesh
              container_name: ui_gyanesh

          volumes:
            db-data:

          networks:
            network_gyanesh:
          EOL

          # Pull the latest images
          docker-compose pull

          # Run Docker Compose
          docker-compose down
          docker-compose up -d

          # Verify the deployment
          curl -f http://localhost:5005/ || exit 1
        EOF