name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Clean up NuGet cache
        run: dotnet nuget locals all --clear

      - name: Restore dependencies for API Core
        run: dotnet restore ./api/Basic3Tier.Core/Basic3Tier.Core.csproj

      - name: Restore dependencies for API Infrastructure
        run: dotnet restore ./api/Basic3Tier.Infrastructure/Basic3Tier.Infrastructure.csproj

      - name: Restore dependencies for API Project
        run: dotnet restore ./api/Basic3TierAPI/Basic3TierAPI.csproj

      - name: Build API Core
        run: dotnet build --configuration Release --no-restore ./api/Basic3Tier.Core/Basic3Tier.Core.csproj

      - name: Build API Infrastructure
        run: dotnet build --configuration Release --no-restore ./api/Basic3Tier.Infrastructure/Basic3Tier.Infrastructure.csproj

      - name: Build API Project
        run: dotnet build --configuration Release --no-restore ./api/Basic3TierAPI/Basic3TierAPI.csproj

      - name: Run tests for API Core
        run: dotnet test --no-build --verbosity normal ./api/Basic3Tier.Core/Basic3Tier.Core.csproj

      - name: Run tests for API Infrastructure
        run: dotnet test --no-build --verbosity normal ./api/Basic3Tier.Infrastructure/Basic3Tier.Infrastructure.csproj

      - name: Run tests for API Project
        run: dotnet test --no-build --verbosity normal ./api/Basic3TierAPI/Basic3TierAPI.csproj

      - name: Set up SonarQube scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/home/runner/.dotnet/tools"

      - name: Run analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        run: |
          dotnet sonarscanner begin /k:"3-tier-cicd" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          dotnet build --no-incremental ./api/Basic3Tier.Core/Basic3Tier.Core.csproj
          dotnet build --no-incremental ./api/Basic3Tier.Infrastructure/Basic3Tier.Infrastructure.csproj
          dotnet build --no-incremental ./api/Basic3TierAPI/Basic3TierAPI.csproj
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  dockerize:
    needs: build-test-scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        run: |
          docker build -t gyaneshtiwari/3-tier-ui:latest ./ui
          docker build -t gyaneshtiwari/3-tier-api:latest ./api

      - name: Tag Docker images
        run: |
          docker tag gyaneshtiwari/3-tier-ui:latest gyaneshtiwari/3-tier-ui:1.0.0
          docker tag gyaneshtiwari/3-tier-api:latest gyaneshtiwari/3-tier-api:1.0.0

      - name: Push Docker images
        run: |
          docker push gyaneshtiwari/3-tier-ui:latest
          docker push gyaneshtiwari/3-tier-ui:1.0.0
          docker push gyaneshtiwari/3-tier-api:latest
          docker push gyaneshtiwari/3-tier-api:1.0.0

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create docker-compose file
        run: |
          echo '
          version: "3.8"
          services:
            db:
              image: postgres:latest
              container_name: db_gyanesh
              environment:
                POSTGRES_USER: "postgres"
                POSTGRES_PASSWORD: "admin123"
                POSTGRES_DB: "basic3tier"
              networks:
                - network_gyanesh
              volumes:
                - ./init.sql:/docker-entrypoint-initdb.d/init.sql

            api:
              image: gyaneshtiwari/3-tier-api:latest
              depends_on:
                - db
              environment:
                - ConnectionStrings__Basic3Tier=Host=db;Port=5432;Database=basic3tier;Username=postgres;Password=admin123
              ports:
                - "7007:80"
              networks:
                - network_gyanesh
              container_name: api_gyanesh

            ui:
              image: gyaneshtiwari/3-tier-ui:latest
              depends_on:
                - api
              ports:
                - "5005:80"
              networks:
                - network_gyanesh
              container_name: ui_gyanesh

          volumes:
            db-data:

          networks:
            network_gyanesh:' > docker-compose.yml

      - name: Copy docker-compose file to EC2
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:~/gyanesh/docker-compose.yml

      - name: Ensure remote directory exists and deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            mkdir -p ~/gyanesh
            echo "Ensuring screen is installed..."
            if ! command -v screen &> /dev/null; then
              echo "Screen is not installed. Installing screen..."
              sudo apt-get update
              sudo apt-get install -y screen
            fi

            echo "Starting screen session for deployment..."
            screen -S deploy_session -d -m bash -c '
              set -e
              LOG_FILE="/home/ubuntu/gyanesh/deployment.log"
              {
                echo "Ensuring Docker is installed..."
                if ! command -v docker &> /dev/null; then
                  echo "Docker is not installed. Installing Docker..."
                  sudo apt-get update
                  sudo apt-get install -y docker.io
                fi

                echo "Ensuring Docker Compose is installed..."
                if ! command -v docker-compose &> /dev/null; then
                  echo "Docker Compose is not installed. Installing Docker Compose..."
                  sudo curl -L "https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                  sudo chmod +x /usr/local/bin/docker-compose
                fi  

                echo "Pulling the latest images..."
                cd ~/gyanesh
                docker-compose pull || { echo "Docker pull failed"; exit 1; }
                echo "Pull completed."

                echo "Stopping existing containers..."
                docker-compose down || { echo "Docker down failed"; exit 1; }
                echo "Existing containers stopped."

                echo "Starting new containers..."
                docker-compose up -d || { echo "Docker up failed"; exit 1; }
                echo "Containers started."

                echo "Listing all running Docker containers..."
                docker ps
              } &> $LOG_FILE
            '
          EOF

      - name: Fetch Deployment logs from EC2
        run: |
          scp -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }}:~/gyanesh/deployment.log deployment.log

      - name: Print Deployment logs
        run: cat deployment.log
